#!/usr/bin/env ruby

require 'pretty_table'

#Define methods
def addBrew()
  if `which brew` == ''
    puts 'You appear to be running MacOS without Homebrew installed.'
    puts "If you don\'t know what Homebrew is, visit 'brew.sh' or just hit enter. If you do and would like to install it, type 'yes'. >> "
    userReply = gets.chomp
    userReply.downcase!
    if userReply == 'yes'
      Kernel.system "ruby -e '$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)'"
    else
      puts "That\'s fine! Just keep in mind, the install, uninstall, and search commands won\'t work for you."
    end
  end
end

def installDeb(package)
  Kernel.system "sudo apt-get install #{package}"
  puts "\r"
  puts "I ran: 'sudo apt-get install #{package}'"
end
def installRpm(package)
  Kernel.system "sudo yum install #{package}"
  puts "\r"
  puts "I ran: 'sudo yum install #{package}'"
end
def installHb(package)
  Kernel.system "brew install #{package}"
  puts "\r"
  puts "I ran: 'brew install #{package}'"
end
def installPac(package)
  Kernel.system "sudo pacman -S #{package}"
  puts "\r"
  puts "I ran: 'sudo pacman -S #{package}'"
end
def uninstallDeb(package)
  Kernel.system "sudo apt-get remove #{package}"
  puts "\r"
  puts "I ran: 'sudo apt-get remove #{package}'"
end
def uninstallRpm(package)
  Kernel.system "sudo yum uninstall #{package}"
  puts "\r"
  puts "I ran: 'sudo yum uninstall #{package}'"
end
def uninstallHb(package)
  Kernel.system "brew uninstall #{package}"
  puts "\r"
  puts "I ran: 'brew uninstall #{package}'"
end
def uninstallPac(package)
  Kernel.system "sudo pacman -R #{package}"
  puts "\r"
  puts "I ran: 'sudo pacman -R #{package}'"
end
def searchDeb(package)
  Kernel.system "apt-cache search #{package}"
  puts "\r"
  puts "I ran: 'apt-cache search #{package}'"
end
def searchRpm(package)
  Kernel.system "yum search #{package}"
  puts "\r"
  puts "I ran: 'yum search #{package}'"
end
def searchHb(package)
  Kernel.system "brew search #{package}"
  puts "\r"
  puts "I ran: 'brew search #{package}'"
end
def searchPac(package)
  Kernel.system "sudo pacman -Ss #{package}"
  puts "\r"
  puts "I ran: 'sudo pacman -Ss #{package}'"
end

#Detect OS
osRaw = `uname -a`
osRaw.downcase!
osLin = osRaw.split(' ')[5]
osDar = osRaw.split(' ')[3]
osUbu = osDar.split('-')[1]
osArchRaw = osRaw.split(' ')[2]
osArch = osArchRaw.split('-')[2]
if osDar == 'darwin' then addBrew() end

#Start Program
puts ' '
runOnce = false
exitIs  = 0
while exitIs == 0 do
  if runOnce == true then puts "\r" end
  print "Type 'help' to list possible commands. >> "
  userCommand = gets.chomp
  userCommand.downcase!

  case userCommand
  #Package management
  when 'install'
    print 'Please enter the name of the program you\'d like to install. >> '
    package = gets.chomp
    package.downcase!
    case osLin
    when 'debian'
      installDeb(package)
    when 'linux mint'
      installDeb(package)
    when 'redhat'
      installRpm(package)
    when 'fedora'
      installRpm(package)
    when 'open suse'
      installRpm(package)
    else
      if osDar == 'darwin'
        installHb(package)
      elsif osArch == 'arch'
        installPac(package)
      elsif osUbu == "ubuntu"
        installDeb(package)
      else
        print "\r"
        puts 'Sorry, I didn\'t recognize your operating system.'
      end
    end
    runOnce = true
  when 'uninstall'
    print 'Please enter the name of the program you\'d like to remove. >> '
    package = gets.chomp
    package.downcase
    case osLin
    when 'debian'
      uninstallDeb(package)
    when 'linux mint'
      uninstallDeb(package)
    when 'redhat'
      uninstallRpm(package)
    when 'fedora'
      uninstallRpm(package)
    when 'open suse'
      uninstallRpm(package)
    else
      if osDar == 'darwin'
        uninstallHb(package)
      elsif osArch == 'arch'
        uninstallPac(package)
      elsif osUbu == "ubuntu"
        installDeb(package)
      else
        print "\r"
        puts 'Sorry, I didn\'t recognize your operating system.'
      end
    end
    runOnce = true
  when 'search'
    print 'Please enter the name of the program you\'d like to search for. >> '
    package = gets.chomp
    package.downcase!
    case osLin
    when 'debian'
      searchDeb(package)
    when 'linux mint'
      searchDeb(package)
    when 'redhat'
      searchRpm(package)
    when 'fedora'
      searchRpm(package)
    when 'open suse'
      searchRpm(package)
    else
      if osDar == 'darwin'
        searchHb(package)
      elsif osArch == 'arch'
        searchPac(package)
      elsif osUbu == "ubuntu"
        installDeb(package)
      else
        print "\r"
        puts 'Sorry, I didn\'t recognize your operating system.'
      end
    end
    runOnce = true
    #File/folder manipulation
  when 'copy'
    print 'Please enter the path to the file (e.g. Downloads/report.doc) >> '
    cpFile = gets.chomp
    puts ' '
    print 'Please enter the destination including the name of the file (e.g. Documents/report.doc) >> '
    cpDest = gets.chomp
    Kernel.system "cp -avr #{cpFile} #{cpDest}"
    puts "\r"
    puts "I ran: 'cp #{cpFile} #{cpDest}'"
    runOnce = true
  when 'rename'
    print 'Please enter the path to the file (e.g. Documents/report.doc). >> '
    cpFile = gets.chomp
    puts ' '
    print 'Please enter the new name including the destination you used earlier (e.g. Documents/Essay.doc). >> '
    cpDest = gets.chomp
    Kernel.system "cp #{cpFile} #{cpDest}"
    puts "\r"
    puts "I ran: 'cp #{cpFile} #{cpDest}'"
    runOnce = true
  when 'delete file'
    print 'Please enter the name of the file you\'d like to remove along with its directory (e.g. Documents/sensitive.doc). >> '
    file = gets.chomp
    Kernel.system "rm #{file}"
    puts "\r"
    puts "I ran: 'rm #{file}'"
    runOnce = true
  when 'delete folder'
    print 'Please enter the name of the folder you\'d like to remove along with its directory (e.g. Garbage/, Documents/Garbage/). >> '
    folder = gets.chomp
    Kernel.system "rm -R -i #{folder}"
    puts "\r"
    puts "I ran: 'rm -R -i #{folder}'"
    runOnce = true
  when 'list files'
    print 'Please enter the name of the folder you\'d like to observe (e.g. Awesome_Files/Pictures). >> '
    folder = gets.chomp
    Kernel.system "ls #{folder}"
    puts "\r"
    puts "I ran: 'ls #{folder}'"
    runOnce = true
  when 'create file'
    print 'Please name your new file along with its directory (e.g. Documents/newfile.doc). >> '
    file = gets.chomp
    Kernel.system "touch #{file}"
    puts "\r"
    puts "I ran: 'touch #{file}'"
    runOnce = true
  when "compile"
    print 'Please enter the location of the c++ code you\'d like to compile (e.g. Projects/helloworld.cpp). >> '
    code = gets.chomp
    print 'Please enter the name you\'d like to give your compiled program. >> '
    name = gets.chomp
    Kernel.system "g++ #{code} -o #{name}"
    puts "I ran: 'g++ #{code} -o #{name}'."
  when "run c++ program"
    print 'Please enter the folder your program is contained in (e.g. Documents, Projects/myfantsticproject, etc.). >> '
    folder = gets.chomp
    print 'Please enter the name of your compiled program (e.g. helloworld, test, etc.). >> '
    program = gets.chomp
    Kernel.system "#{folder}./#{program}"
  when 'help'
    headers = [ 'Command', 'Action']
    commands = [
      ["install", "install new programs or 'packages' on your system"],
      ["uninstall", "remove programs or 'packages' from your system"],
      ["search", "search for a program that can be installed with the aforementioned 'install' command"],
      ["copy", "copies a file or folder to another place"],
      ["rename", "renames a file on your computer"],
      ["delete file", "deletes a file on your compter"],
      ["delete folder", "deletes a folder on your computer (type yes at every promt)."],
      ["create file", "creates an empty text file on your computer (.rb, .py, .java, etc. count as text files)"],
      ["change working folder", "change the folder you\'ll be working in (e.g. Documents)"],
      ["list files", "list all of the files in a given folder (e.g. Downloads)"],
      ["compile", "compiles a c++ file (e.g. foo.cpp)"],
      ["run c++ program", "runs a c++ program compiled with the aforementioned command"],
      ["exit", "exits ezbash"]]
    puts PrettyTable.new(commands, headers).to_s
    puts "\r"
  when 'exit'
    abort
  else
    puts 'Sorry, I didn\'t catch that.'
  end
end
